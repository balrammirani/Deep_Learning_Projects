import cv2
from os import walk,path
from keras.preprocessing.image import img_to_array
from sklearn.model_selection import train_test_split

import numpy as np
import pandas as pd

dir_path ="D:\AV_Comp\Image Classification\images\200.Common_Yellowthroat"
data = []
labels = []
for (dirpath, dirnames, filenames) in walk(dir_path):
        for filename in filenames: 
	# load the image, pre-process it, and store it in the data list
            if "._" not in filename:
                print(filename)
#                filepath = path.join(dirpath,filename)
                image = cv2.imread(path.join(dirpath,filename))
                image = cv2.resize(image, (28, 28))
                image = img_to_array(image)
                data.append(image)
            # extract the class label from the image path and update the
	         # labels list
                label = dirpath.split(".")[-1]
                labels.append(label)
 

dir_path = "D:\AV_Comp\Image Classification\Black_footed_Albatross"
        for filename in filenames: 
	# load the image, pre-process it, and store it in the data list
            if "._" not in filename:
                print(filename)
#                filepath = path.join(dirpath,filename)
                image = cv2.imread(path.join(dirpath,filename))
                image = cv2.resize(image, (28, 28))
                image = img_to_array(image)
                data.append(image)
            # extract the class label from the image path and update the
	         # labels list
                label = dirpath.split(".")[-1]
                labels.append(label)

# scale the raw pixel intensities to the range [0, 1]
data = np.array(data, dtype="float") / 255.0
labels = np.array(labels)
 
# partition the data into training and testing splits using 75% of
# the data for training and the remaining 25% for testing
(trainX, testX, trainY, testY) = train_test_split(data,labels, test_size=0.25, random_state=42)
 
# convert the labels from integers to vectors

trainY = pd.get_dummies(trainY)
testY = pd.get_dummies(testY)

# construct the image generator for data augmentation
aug = ImageDataGenerator(rotation_range=30, width_shift_range=0.1,
	height_shift_range=0.1, shear_range=0.2, zoom_range=0.2,
	horizontal_flip=True, fill_mode="nearest")

# initialize the model
print("[INFO] compiling model...")

model = vgg16.build(width=28, height=28, depth=3, classes=2)
opt = Adam(lr=INIT_LR, decay=INIT_LR / EPOCHS)
model.compile(loss="binary_crossentropy", optimizer=opt,
	metrics=["accuracy"])
#trainY = to_categorical(trainY, num_classes=200)
#testY = to_categorical(testY, num_classes=2)
